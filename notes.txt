'make lib' -> quand on change un truc dans la lib, ou qu'on veut recompiler tout src sans recompiler la lib (par ex pour mettre/retirer d=0)

besoin de proteger ft_strcmp? (comments)

export f="  la.    ok.      sf.  non"
export
echo $f
echo "$f"
cat $f
cat "$f"
export h=~/fs                        || machine->cur_token->str[ft_strlen(machine->cur_token->str) - 2] == '='
export fd='$fs'

command loop (semicolon)

quit apres une erreur de parsing? (fonction error())
par exemple export d=\

testlines pour multipipes :
cat | cat | ls
cat /dev/urandom | cat
ls -la | grep oct | tr -dc '0-9'

segfault quand on fait ctrl-d directement a la premiere commande de minishell
ou quand on valide une commande vide

commande "."
builtins: set stat_loc?
mkdir ok; cd ok; rmdir ../ok; pwd

header file sections https://www.doc.ic.ac.uk/lab/cplus/cstyle.html#N100D8

trop bizarre la len d'un token ne peut pas etre superieure a 4095 sur linux
et on peut pas ecrire plus de 1023 (ou 2047?) chars apres le prompt sur mac
>>!!Gnl recursif limite par la taille de la stack ? -> verifier ulimit -a !!

https://brennan.io/2015/01/16/write-a-shell-in-c/
redirections https://catonmat.net/bash-one-liners-explained-part-three
multiple redirections https://stackoverflow.com/questions/20081653/two-redirection-operators-in-one-command
redirection and pipe explanation https://askubuntu.com/questions/172982/what-is-the-difference-between-redirection-and-pipe/1074550#1074550

forks https://www.youtube.com/watch?v=ss1-REMJ9GA
pipes https://www.youtube.com/watch?v=dhFkwGRSVGk
signals https://www.youtube.com/watch?v=83M5-NPDeWs

Shell Command Language https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html
man bash https://www.gnu.org/software/bash/manual/html_node/index.html

man bash -> QUOTING
	non-quoted \ : écrit littéralement le caractère qui suit, à l’exception de <newline>
	'' : - écrit littéralement ce qui est entre single quotes
		 - ' ou \' ne peuvent pas apparaitre entre single quotes
	"" : - écrit littéralement sauf pour $, `, \ et ! si history expansion est activé
		 - $ et ` gardent leur special meaning
		 - \ reste un escape char seulement pour $, `, ", \, ou <newline>
		 - * et @ ont un special meaning entre double quotes
	https://stackoverflow.com/questions/25941394/how-does-bash-deal-with-nested-quotes

testeur https://github.com/cacharle/minishell_test.git

Les redirections doivent être effectuées à l'intérieur d'un fork(), il faut donc fork avant prepare_commands (hormis pour cd et env).
